<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Raph&#39;s Blog</title>
    <link>http://example.org/tags/json/</link>
    <description>Recent content in Json on Raph&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Dec 2014 14:38:00 +1100</lastBuildDate>
    
	<atom:link href="http://example.org/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JSON serialisation/deserialisation with snake_case naming conventions</title>
      <link>http://example.org/posts/json-serialisationdeserialisation-with-comments/</link>
      <pubDate>Tue, 02 Dec 2014 14:38:00 +1100</pubDate>
      
      <guid>http://example.org/posts/json-serialisationdeserialisation-with-comments/</guid>
      <description>Couple of notes: 1) You should probably instantiat&amp;hellip; Marc O. Alfonso - Dec 5, 2014
Couple of notes:
1) You should probably instantiate a regex object for reuse
2) It seems like a variable like MyLLCName would incorrectly be translated to my_l_l_c_name instead of my_llc_name
3) it seems like a variable like &amp;ldquo;FirstName99&amp;rdquo; would incorrect be translated to first_name_9_9 instead of first_name_99 (for integer separated)
My suggestion is to use:</description>
    </item>
    
    <item>
      <title>JSON serialisation/deserialisation with snake_case naming conventions</title>
      <link>http://example.org/posts/json-serialisationdeserialisation-with/</link>
      <pubDate>Tue, 02 Dec 2014 14:38:00 +1100</pubDate>
      
      <guid>http://example.org/posts/json-serialisationdeserialisation-with/</guid>
      <description>GitHub (NuGet package source)
GitHub (UsageÂ example)
Nuget Package
JSON is quickly becoming the norm for data transfer along the HTTP protocol and for many of us it is a daily task to serialise into and from JSON.
The problem with JSON, however, is the fact that there is no standard associated with its naming conventions. Let me give you an example.
Below is a snipet of JSON from the Twitter API:</description>
    </item>
    
    <item>
      <title>Instagram API filtering (or querying)</title>
      <link>http://example.org/posts/instagram-api-filtering-comments/</link>
      <pubDate>Fri, 21 Feb 2014 16:53:00 +1100</pubDate>
      
      <guid>http://example.org/posts/instagram-api-filtering-comments/</guid>
      <description> Thanks for sharing Marcel - Feb 1, 2014
Thanks for sharing </description>
    </item>
    
    <item>
      <title>Instagram API filtering (or querying)</title>
      <link>http://example.org/posts/instagram-api-filtering/</link>
      <pubDate>Fri, 21 Feb 2014 16:53:00 +1100</pubDate>
      
      <guid>http://example.org/posts/instagram-api-filtering/</guid>
      <description>GitHub
Instagram&amp;rsquo;s APIs are well written, well documented, RESTfull and simply a breeze to use.
I myself prefer them to the Facebook APIs, however the Facebook Graph API does have an advantage over that of the Instagram API - namely filtering. The question I will answer in this blog post is whether there is an efficient way to filter the Instagram API.
Facebook Situation For example, if I wanted to display information about a user on Facebook, I would query:</description>
    </item>
    
  </channel>
</rss>