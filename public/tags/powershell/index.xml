<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Raph&#39;s Blog</title>
    <link>http://example.org/tags/powershell/</link>
    <description>Recent content in Powershell on Raph&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 May 2015 15:08:00 +1000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell from SourceTree as a custom action</title>
      <link>http://example.org/posts/powershell-from-sourcetree-as-custom-comments/</link>
      <pubDate>Mon, 04 May 2015 15:08:00 +1000</pubDate>
      
      <guid>http://example.org/posts/powershell-from-sourcetree-as-custom-comments/</guid>
      <description> start powershell -Command &amp;ldquo;start powershell&amp;amp;q&amp;hellip; Roberto - Feb 6, 2016
start powershell -Command &amp;ldquo;start powershell&amp;rdquo;
This command works better: source tree would not hang waiting for you to close the shell </description>
    </item>
    
    <item>
      <title>PowerShell from SourceTree as a custom action</title>
      <link>http://example.org/posts/powershell-from-sourcetree-as-custom/</link>
      <pubDate>Mon, 04 May 2015 15:08:00 +1000</pubDate>
      
      <guid>http://example.org/posts/powershell-from-sourcetree-as-custom/</guid>
      <description>Step 1:
Create a ps.bat file with one line:
start powershell
Save this file in an appropriate location. I saved mine to:
C:\CustomCommands

Step 2:
Add a custom action to SourceTree.
You do this by going to
Tools -&amp;gt; Options -&amp;gt; Custom Actions


Click the &amp;lsquo;Add&amp;rsquo; button and you will get another Window.
On the &amp;lsquo;Menu caption&amp;rsquo; type an identifier for PowerShell and on &amp;lsquo;Script to run&amp;rsquo; navigate to the script you made in step 1 then click &amp;lsquo;OK&amp;rsquo; and exit from the &amp;lsquo;Options&amp;rsquo; Window.</description>
    </item>
    
    <item>
      <title>Create certificate for use with Azure PowerShell cmdlets</title>
      <link>http://example.org/posts/create-certificate-for-use-with-azure-comments/</link>
      <pubDate>Fri, 17 Apr 2015 14:53:00 +1000</pubDate>
      
      <guid>http://example.org/posts/create-certificate-for-use-with-azure-comments/</guid>
      <description> The location of makecert for Visual Studio 2013: C&amp;hellip; Rajeev Joseph - Jul 1, 2015
The location of makecert for Visual Studio 2013: C:\Program Files (x86)\Windows Kits\8.1\bin\x64 oh b.t.w. thanks Raph.. helped me out big time :) Rajeev Joseph - Jul 1, 2015
oh b.t.w. thanks Raph.. helped me out big time :) Thanks Raph! Ahmed IG - Jan 1, 2016
Thanks Raph! </description>
    </item>
    
    <item>
      <title>Create certificate for use with Azure PowerShell cmdlets</title>
      <link>http://example.org/posts/create-certificate-for-use-with-azure/</link>
      <pubDate>Fri, 17 Apr 2015 14:53:00 +1000</pubDate>
      
      <guid>http://example.org/posts/create-certificate-for-use-with-azure/</guid>
      <description>There are two ways to access your Azure subscription from PowerShell(PS). The first is to use Add-AzureAccount and subsequently be greeted with a login. The other way is to use Set-AzureSubscription and use certificates.
Below is the method of using certificates for more fluid scripts.
 Open visual studio command prompt as an administrator. This is located under your Visual Studio family of applications. 
 run this command (replacing  with a name)</description>
    </item>
    
  </channel>
</rss>