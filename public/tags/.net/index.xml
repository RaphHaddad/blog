<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on Raph&#39;s Blog</title>
    <link>http://example.org/tags/.net/</link>
    <description>Recent content in .Net on Raph&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Apr 2015 14:53:00 +1000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create certificate for use with Azure PowerShell cmdlets</title>
      <link>http://example.org/posts/create-certificate-for-use-with-azure-comments/</link>
      <pubDate>Fri, 17 Apr 2015 14:53:00 +1000</pubDate>
      
      <guid>http://example.org/posts/create-certificate-for-use-with-azure-comments/</guid>
      <description> The location of makecert for Visual Studio 2013: C&amp;hellip; Rajeev Joseph - Jul 1, 2015
The location of makecert for Visual Studio 2013: C:\Program Files (x86)\Windows Kits\8.1\bin\x64 oh b.t.w. thanks Raph.. helped me out big time :) Rajeev Joseph - Jul 1, 2015
oh b.t.w. thanks Raph.. helped me out big time :) Thanks Raph! Ahmed IG - Jan 1, 2016
Thanks Raph! </description>
    </item>
    
    <item>
      <title>Create certificate for use with Azure PowerShell cmdlets</title>
      <link>http://example.org/posts/create-certificate-for-use-with-azure/</link>
      <pubDate>Fri, 17 Apr 2015 14:53:00 +1000</pubDate>
      
      <guid>http://example.org/posts/create-certificate-for-use-with-azure/</guid>
      <description>There are two ways to access your Azure subscription from PowerShell(PS). The first is to use Add-AzureAccount and subsequently be greeted with a login. The other way is to use Set-AzureSubscription and use certificates.
Below is the method of using certificates for more fluid scripts.
 Open visual studio command prompt as an administrator. This is located under your Visual Studio family of applications. 
 run this command (replacing  with a name)</description>
    </item>
    
    <item>
      <title>JSON serialisation/deserialisation with snake_case naming conventions</title>
      <link>http://example.org/posts/json-serialisationdeserialisation-with-comments/</link>
      <pubDate>Tue, 02 Dec 2014 14:38:00 +1100</pubDate>
      
      <guid>http://example.org/posts/json-serialisationdeserialisation-with-comments/</guid>
      <description>Couple of notes: 1) You should probably instantiat&amp;hellip; Marc O. Alfonso - Dec 5, 2014
Couple of notes:
1) You should probably instantiate a regex object for reuse
2) It seems like a variable like MyLLCName would incorrectly be translated to my_l_l_c_name instead of my_llc_name
3) it seems like a variable like &amp;ldquo;FirstName99&amp;rdquo; would incorrect be translated to first_name_9_9 instead of first_name_99 (for integer separated)
My suggestion is to use:</description>
    </item>
    
    <item>
      <title>JSON serialisation/deserialisation with snake_case naming conventions</title>
      <link>http://example.org/posts/json-serialisationdeserialisation-with/</link>
      <pubDate>Tue, 02 Dec 2014 14:38:00 +1100</pubDate>
      
      <guid>http://example.org/posts/json-serialisationdeserialisation-with/</guid>
      <description>GitHub (NuGet package source)
GitHub (Usage example)
Nuget Package
JSON is quickly becoming the norm for data transfer along the HTTP protocol and for many of us it is a daily task to serialise into and from JSON.
The problem with JSON, however, is the fact that there is no standard associated with its naming conventions. Let me give you an example.
Below is a snipet of JSON from the Twitter API:</description>
    </item>
    
  </channel>
</rss>